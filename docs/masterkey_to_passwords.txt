Full flow from master password → derived key → Fernet key → encrypted passwords

User enters master password
            │
            ▼
      +------------------+
      | Master Password  |
      +------------------+
            │
            ▼
PBKDF2HMAC Key Derivation with salt
            │
            ▼
     +--------------------+
     | Derived Key (32B)  |
     +--------------------+
            │
            ▼
base64.urlsafe_b64encode
            │
            ▼
     +--------------------+
     | Fernet Key (32B,   |
     | base64-encoded)    |
     +--------------------+
            │
            ▼
Fernet Encryption/Decryption
            │
            │
+-------------------------+          +-------------------------+
| Encrypt passwords list  |          | Decrypt passwords list  |
| json.dumps(passwords)   |  ←→     | fernet.decrypt(encrypted|
| fernet.encrypt(data)    |          | .read())                |
+-------------------------+          +-------------------------+
            │
            ▼
  Write encrypted bytes to file
         passwords.dat

Step-by-step explanation

1. Master password
    Only you know it; never stored directly.

2. Derived key with PBKDF2 + salt
    Converts password into a strong, fixed-length key.
    Salt ensures uniqueness and defends against rainbow table attacks.

3. Fernet key
    Fernet needs a 32-byte key encoded in base64, so we encode the derived key.
    This key can now be used safely to encrypt/decrypt your password list.

4. Passwords encryption
    Your Python list of (name, password) is converted to a JSON string.
    Fernet encrypts the bytes → you save only encrypted bytes to disk.

5. Passwords decryption
    You read the encrypted file, decrypt it with Fernet key, decode to string, then use 
    json.loads to turn it back into a Python list.